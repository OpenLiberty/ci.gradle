apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    mavenCentral()
    maven {
        name = 'WASdev Repository'
        url = 'http://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/maven/repository/'
    }
    maven {
        name = 'Sonatype Nexus Snapshots'
        url = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

configurations {
    provided
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile ('net.wasdev.wlp.ant:wlp-anttasks:1.4-SNAPSHOT')
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    provided group: 'com.ibm.websphere.appserver.api', name: 'com.ibm.websphere.appserver.spi.kernel.embeddable', version: '1.0.0'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        groovy.srcDir file('src/integTest/groovy')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    logging.level = LogLevel.INFO
    description = 'Runs the integration tests.'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    if (!(project.hasProperty('runit'))) {
        enabled = false
    } else {
        systemProperties System.getProperties()
        systemProperty 'runit',runit
    }
    mustRunAfter test
}

check.dependsOn integrationTest
sourceSets.main.compileClasspath += configurations.provided

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

archivesBaseName = 'liberty-gradle-plugin'
group = 'net.wasdev.wlp.gradle.plugins'
version = '1.1-SNAPSHOT'

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar) {
    classifier = 'groovydoc'
    from groovydoc
} 

artifacts {
    archives groovydocJar, sourcesJar
}

if (!version.endsWith("SNAPSHOT")) {
    signing {           
        sign configurations.archives
    }
}

if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
          name 'liberty-gradle-plugin'
          packaging 'jar'
          description 'Liberty Gradle Plug-in.'
          url 'https://wasdev.github.io'

          scm {
            connection 'scm:git:git@github.com:WASdev/ci.gradle.git'
            developerConnection 'scm:git:git@github.com:WASdev/ci.gradle.git'
            url 'git@github.com:WASdev/ci.gradle.git'
            tag 'HEAD'
          }

          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'https://raw.github.com/WASdev/ci.gradle/master/LICENSE'
            }
          }

          developers {
            developer {
              id 'jgawor'
              name 'Jarek Gawor'
              email 'jgawor@gmail.com'
            }
          }
        }
      }
    }
  }
}

