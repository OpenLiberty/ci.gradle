plugins {
  id 'groovy'
  id 'maven'
  id 'maven-publish'
  id 'signing'
  id 'java-gradle-plugin'
  id "com.gradle.plugin-publish" version "0.9.9"
  id "org.ysb33r.gradletest" version "2.0-alpha-1"
}

apply plugin: "org.ysb33r.gradletest"

repositories {
  mavenCentral()
  maven {
    name = 'WASdev Repository'
    url = 'http://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/maven/repository/'
  }
  maven {
    name = 'Sonatype Nexus Snapshots'
    url = 'https://oss.sonatype.org/content/repositories/snapshots/'
  }
}

configurations {
  provided
}

gradleTest {
  versions '4.3.1'
//  versions '4.0', '4.1', '4.2'
//  versions '3.5', '3.4.1'
//  versions '3.3', '3.2.1', '3.1', '3.0'

  gradleArguments = ["-PlibertyVersion=17.0.0.2", "--stacktrace"]

  expectFailure 'sample.servlet.fail'

  beforeTest {
    println "  ${it.name}"
  }
}

compileJava {
  sourceCompatibility = JavaVersion.VERSION_1_7
  targetCompatibility = JavaVersion.VERSION_1_7
}

compileTestJava {
  sourceCompatibility = JavaVersion.VERSION_1_7
  targetCompatibility = JavaVersion.VERSION_1_7
}

compileGroovy {
  sourceCompatibility = JavaVersion.VERSION_1_7
  targetCompatibility = JavaVersion.VERSION_1_7
}

compileTestGroovy {
  sourceCompatibility = JavaVersion.VERSION_1_7
  targetCompatibility = JavaVersion.VERSION_1_7
}

dependencies {
  compile gradleApi()
  compile localGroovy()
  compile ('net.wasdev.wlp.ant:wlp-anttasks:1.3')
  compile group: 'commons-io', name: 'commons-io', version: '2.5'
  compile gradleApi()
  compile localGroovy()
  provided group: 'com.ibm.websphere.appserver.api', name: 'com.ibm.websphere.appserver.spi.kernel.embeddable', version: '1.0.0'
  testCompile 'junit:junit:4.11'
  testCompile gradleTestKit()
}

sourceSets {
  integrationTest {
    groovy.srcDir file('src/integTest/groovy')
    resources.srcDir file('src/integTest/resources')
    compileClasspath = sourceSets.main.output + configurations.testRuntime
    runtimeClasspath = output + compileClasspath
//    output.classesDirs = new File(buildDir, 'classes/java/integrationTest')
  }
}

task integrationTest(type: Test) {
  logging.level = LogLevel.INFO
  description = 'Runs the integration tests.' + gradle.gradleVersion
  if (!gradle.gradleVersion.startsWith('4.')) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
  } else {
    testClassesDirs = fileTree(dir: sourceSets.integrationTest.output.classesDir)
  }
  classpath = sourceSets.integrationTest.runtimeClasspath
  if (!(project.hasProperty('runit'))) {
    enabled = false
  } else {
    systemProperties System.getProperties()
    systemProperty 'runit',runit
  }
  mustRunAfter test
}

check.dependsOn integrationTest
sourceSets.main.compileClasspath += configurations.provided

task wrapper(type: Wrapper) {
  gradleVersion = '3.5'
}

archivesBaseName = 'liberty-gradle-plugin'
group = 'net.wasdev.wlp.gradle.plugins'
version = '3.0-SNAPSHOT'

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task groovydocJar(type: Jar) {
  classifier = 'groovydoc'
  from groovydoc
}

artifacts {
  archives groovydocJar, sourcesJar
}

if (!version.endsWith("SNAPSHOT")) {
  signing {
    sign configurations.archives
  }
}

gradlePlugin {
  //noinspection GroovyAssignabilityCheck
  plugins {
    liberty {
      id = 'liberty'
      implementationClass = 'net.wasdev.wlp.gradle.plugins.Liberty'
    }

    cigradle {
      id = 'net.wasdev.wlp.gradle.plugins.Liberty'
      implementationClass = 'net.wasdev.wlp.gradle.plugins.Liberty'
    }
  }
}

pluginBundle {
  website = 'https://github.com/WASdev/ci.gradle'
  vcsUrl = 'https://github.com/WASdev/ci.gradle'
  description = 'Gradle plugin for managing Liberty servers'
  tags = ['liberty', 'websphere', 'devops']

  plugins {
    cigradle {
      id = 'net.wasdev.wlp.gradle.plugins.Liberty'
      displayName = 'ci.gradle'
    }
  }
}

if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
          name 'liberty-gradle-plugin'
          packaging 'jar'
          description 'Liberty Gradle Plug-in.'
          url 'https://wasdev.github.io'

          scm {
            connection 'scm:git:git@github.com:WASdev/ci.gradle.git'
            developerConnection 'scm:git:git@github.com:WASdev/ci.gradle.git'
            url 'git@github.com:WASdev/ci.gradle.git'
            tag 'HEAD'
          }

          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'https://raw.github.com/WASdev/ci.gradle/master/LICENSE'
            }
          }

          developers {
            developer {
              id 'jgawor'
              name 'Jarek Gawor'
              email 'jgawor@gmail.com'
            }
          }
        }
      }
    }
  }
}

groovydoc.enabled = false
