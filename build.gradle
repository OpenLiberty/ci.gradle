apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "com.gradle.plugin-publish"
apply plugin: 'base'

group = 'io.openliberty.tools'
version = '3.9.6-SNAPSHOT'
base {
    archivesName='liberty-gradle-plugin'
}
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'Central Portal Snapshots'
        url = 'https://central.sonatype.com/repository/maven-snapshots/'
        content {
            includeModule("io.openliberty.tools","liberty-ant-tasks")
            includeModule("io.openliberty.tools","ci.common")
        }
    }
    maven {
        url = 'https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/maven/repository/'
    }

}

buildscript {
    repositories {
        mavenLocal()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.12.0"
    }
}

configurations {
    provided
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

// Ensure test tasks use UTF-8 encoding via JVM args, not via options.encoding
tasks.withType(Test).configureEach {
    jvmArgs '-Dfile.encoding=UTF-8'
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileGroovy {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileTestGroovy {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// In-order to support both Java 17 and Java 21, we configure the toolchain
// Reference: https://docs.gradle.org/current/userguide/toolchains.html
java {
    toolchain {
        // Default to Java 17 for backward compatibility
        languageVersion = JavaLanguageVersion.of(17)

        // Allow Java 21 as a compatible alternative
        // This enables the project to work with either Java 17 or Java 21
        if (System.getProperty('java.version').startsWith('21')) {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }
}

def libertyAntVersion = "1.9.17"
def libertyCommonVersion = "1.8.40-SNAPSHOT"


dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation ("io.openliberty.tools:liberty-ant-tasks:$libertyAntVersion")
    implementation ("io.openliberty.tools:ci.common:$libertyCommonVersion")
    implementation group: 'commons-io', name: 'commons-io', version: '2.14.0'
    provided group: 'com.ibm.websphere.appserver.spi', name: 'com.ibm.websphere.appserver.spi.kernel.embeddable', version: '1.0.0'
    testImplementation 'junit:junit:4.13.1'
    testImplementation gradleTestKit()
}

sourceSets.main.compileClasspath += configurations.provided

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

artifacts {
    archives javadocJar, sourcesJar
}

test {
    failOnNoDiscoveredTests = false
    minHeapSize = "1G"
    maxHeapSize = "3G"
    jvmArgs '-Xmx3G'

    systemProperties System.getProperties()
    systemProperty 'runit', 'online'

    doFirst {
        String runtimeGroup
        String runtimeArtifactId
        String kernelArtifactId
        String libertyRuntime = System.getProperty('runtime')
        String runtimeVersion = System.getProperty('runtimeVersion')

        if (libertyRuntime == null || libertyRuntime.isEmpty()) {
            throw new GradleException('Tests could not be run. Please specify a Liberty runtime. Choose either wlp or ol.')
        }
        if (runtimeVersion == null || runtimeVersion.isEmpty()) {
            throw new GradleException('Tests could not be run. Please specify a Liberty runtime version.')
        }

        Properties prop = new Properties()
        OutputStream output = null

        try {

            output = new FileOutputStream("${project.getLayout().getBuildDirectory().getAsFile().get()}/gradle.properties")

            if (libertyRuntime == "ol") {
                runtimeGroup = "io.openliberty"
                runtimeArtifactId = "openliberty-runtime"
                kernelArtifactId = "openliberty-kernel"
            } else {
                runtimeGroup = "com.ibm.websphere.appserver.runtime"
                runtimeArtifactId = "wlp-javaee7"
                kernelArtifactId = "wlp-kernel"
            }

            // set the properties value
            prop.setProperty("lgpVersion", version)
            prop.setProperty("runtimeGroup", runtimeGroup)
            prop.setProperty("runtimeArtifactId", runtimeArtifactId)
            prop.setProperty("kernelArtifactId", kernelArtifactId)
            prop.setProperty("runtimeVersion", runtimeVersion)
            prop.setProperty("antVersion", libertyAntVersion)
            prop.setProperty("commonVersion", libertyCommonVersion)

            // save properties to project root folder
            prop.store(output, null)

        } catch (IOException io) {
            io.printStackTrace()
        } finally {
            if (output != null) {
                try {
                    output.close()
                } catch (IOException e) {
                    e.printStackTrace()
                }
            }
        }
    }
    if (project.hasProperty('test.exclude')){
        for (String pattern: project.property('test.exclude').split(',')) {
            exclude pattern
        }
    }
    if (project.hasProperty('test.include')){
        for (String pattern: project.property('test.include').split(',')) {
            include pattern
        }
    }
}

pluginBundle {
    website = 'https://github.com/OpenLiberty/ci.gradle'
    vcsUrl = 'https://github.com/OpenLiberty/ci.gradle'
    description = 'Gradle plugin for managing Liberty servers'
    tags = ['liberty', 'websphere', 'devops']

    plugins {
        cigradle {
            id = 'io.openliberty.tools.gradle.Liberty'
            displayName = 'ci.gradle'
        }
    }
}

publishing {
    publications {
        libertyGradle (MavenPublication) {
            artifactId = base.archivesName.get()

            from components.java
            artifact javadocJar
            artifact sourcesJar

            pom {
                name = 'liberty-gradle-plugin'
                packaging = 'jar'
                description = 'Liberty Gradle Plug-in.'
                url = 'https://github.com/OpenLiberty/ci.gradle'
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'https://raw.github.com/OpenLiberty/ci.gradle/main/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'OpenLiberty'
                        name = 'Cheryl King'
                        email = 'developers@openliberty.io'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:OpenLiberty/ci.gradle.git'
                    developerConnection = 'scm:git:git@github.com:OpenLiberty/ci.gradle.git'
                    url = 'git@github.com:OpenLiberty/ci.gradle.git'
                    tag = 'HEAD'
                }
            }
        }
    }
}

if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {

    if (!version.endsWith("SNAPSHOT")) {

        signing {
            sign publishing.publications.libertyGradle
        }
    } else {
        signing.required = false

        publishing {
            repositories {
                maven {
                    name = "Nexus"
                    url = "https://central.sonatype.com/repository/maven-snapshots/"

                    credentials {
                        username = ossrhUsername
                        password = ossrhPassword
                    }
                }
            }
        }
    }
}

task install {
    dependsOn "publishToMavenLocal", ":pluginRepo:publishTestPublicationToTestRepository"
}

publishToMavenLocal.dependsOn jar

groovydoc.enabled = false
javadoc.enabled = false
