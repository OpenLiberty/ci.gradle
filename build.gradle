import java.io.FileOutputStream
import java.io.IOException
import java.io.OutputStream
import java.util.Properties

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: "com.gradle.plugin-publish"

archivesBaseName = 'liberty-gradle-plugin'
group = 'net.wasdev.wlp.gradle.plugins'
version = '2.6.6-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'http://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/maven/repository/'
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.7"
    }
}

configurations {
    provided
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

compileGroovy {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

compileTestGroovy {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile ('net.wasdev.wlp.ant:wlp-anttasks:1.6')
    compile ('net.wasdev.wlp.common:ci.common:1.3.5')
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    provided group: 'com.ibm.websphere.appserver.api', name: 'com.ibm.websphere.appserver.spi.kernel.embeddable', version: '1.0.0'
    testCompile 'junit:junit:4.11'
    testCompile gradleTestKit()
}

sourceSets.main.compileClasspath += configurations.provided

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar) {
    classifier = 'groovydoc'
    from groovydoc
}

artifacts {
    archives groovydocJar, sourcesJar
}

test {
    systemProperties System.getProperties()
    systemProperty 'runit', 'online'

    doFirst {
        String runtimeGroup
        String runtimeArtifactId
        String kernelArtifactId
        String libertyRuntime = System.getProperty('runtime')
        String runtimeVersion = System.getProperty('runtimeVersion')

        if (libertyRuntime == null || libertyRuntime.isEmpty()) {
            throw new GradleException('Tests could not be run. Please specify a Liberty runtime. Choose either wlp or ol.')
        }
        if (runtimeVersion == null || runtimeVersion.isEmpty()) {
            throw new GradleException('Tests could not be run. Please specify a Liberty runtime version.')
        }

        Properties prop = new Properties()
        OutputStream output = null

        try {

        output = new FileOutputStream("${buildDir}/gradle.properties");

        if (libertyRuntime == "ol") {
            runtimeGroup = "io.openliberty"
            runtimeArtifactId = "openliberty-runtime"
            kernelArtifactId = "openliberty-kernel"
        } else {
            runtimeGroup = "com.ibm.websphere.appserver.runtime"
            runtimeArtifactId = "wlp-webProfile7"
            kernelArtifactId = "wlp-kernel"
        }

        // set the properties value
        prop.setProperty("lgpVersion", version)
        prop.setProperty("runtimeGroup", runtimeGroup)
        prop.setProperty("runtimeArtifactId", runtimeArtifactId)
        prop.setProperty("kernelArtifactId", kernelArtifactId)
        prop.setProperty("runtimeVersion", runtimeVersion)

        // save properties to project root folder
        prop.store(output, null)

        } catch (IOException io) {
            io.printStackTrace()
        } finally {
            if (output != null) {
                try {
                    output.close()
                } catch (IOException e) {
                    e.printStackTrace()
                }
            }
        }
    }
    if (project.hasProperty('test.exclude')){
        exclude project.property('test.exclude')
    }
    if (project.hasProperty('test.include')){
        include project.property('test.include')
    }
}

if (!version.endsWith("SNAPSHOT")) {
    signing {
        sign configurations.archives
    }
}

pluginBundle {
  website = 'https://github.com/WASdev/ci.gradle'
  vcsUrl = 'https://github.com/WASdev/ci.gradle'
  description = 'Gradle plugin for managing Liberty servers'
  tags = ['liberty', 'websphere', 'devops']

  plugins {
    cigradle {
      id = 'net.wasdev.wlp.gradle.plugins.Liberty'
      displayName = 'ci.gradle'
    }
  }
}

if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
          name 'liberty-gradle-plugin'
          packaging 'jar'
          description 'Liberty Gradle Plug-in.'
          url 'https://wasdev.github.io'

          scm {
            connection 'scm:git:git@github.com:WASdev/ci.gradle.git'
            developerConnection 'scm:git:git@github.com:WASdev/ci.gradle.git'
            url 'git@github.com:WASdev/ci.gradle.git'
            tag 'HEAD'
          }

          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'https://raw.github.com/WASdev/ci.gradle/master/LICENSE'
            }
          }

          developers {
            developer {
              id 'jgawor'
              name 'Jarek Gawor'
              email 'jgawor@gmail.com'
            }
          }
        }
      }
    }
  }
}

groovydoc.enabled = false