/**
 * (C) Copyright IBM Corporation 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.openliberty.tools.gradle.tasks

import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.util.Set
import java.net.URL;
import java.net.URLClassLoader;
import java.lang.reflect.InvocationTargetException;

import javax.xml.parsers.ParserConfigurationException
import javax.xml.transform.TransformerException

import org.gradle.api.artifacts.ResolveException
import org.gradle.api.logging.LogLevel
import org.gradle.api.tasks.TaskAction
import org.gradle.api.tasks.options.Option
import org.xml.sax.SAXException

import io.openliberty.tools.common.plugins.util.InstallFeatureUtil
import io.openliberty.tools.common.plugins.config.ServerConfigXmlDocument
import io.openliberty.tools.common.plugins.config.XmlDocument
import io.openliberty.tools.common.plugins.util.DevUtil
import io.openliberty.tools.common.plugins.util.PluginExecutionException
import io.openliberty.tools.common.plugins.util.PluginScenarioException
import io.openliberty.tools.gradle.utils.ArtifactDownloadUtil

class GenerateFeaturesTask extends AbstractFeatureTask {

    private static final String GENERATED_FEATURES_FILE_NAME = "generated-features.xml";
    protected static final String GENERATED_FEATURES_FILE_PATH = "configDropins/overrides/" + GENERATED_FEATURES_FILE_NAME;
    protected static final String FEATURES_FILE_MESSAGE = "The Liberty Gradle Plugin has generated Liberty features necessary for your application in " + GENERATED_FEATURES_FILE_PATH;
    protected static final String HEADER = "# Generated by liberty-gradle-plugin";

    private static final String BINARY_SCANNER_MAVEN_GROUP_ID = "com.ibm.websphere.appmod.tools";
    private static final String BINARY_SCANNER_MAVEN_ARTIFACT_ID = "binaryAppScanner";
    private static final String BINARY_SCANNER_MAVEN_TYPE = "jar";
    private static final String BINARY_SCANNER_MAVEN_VERSION = "latest.release";

    private static final String BINARY_SCANNER_CONFLICT_MESSAGE1 = "A working set of features could not be generated due to conflicts " +
            "between configured features and the application's API usage: %s. Review and update your server configuration and " +
            "application to ensure they are not using conflicting features and APIs from different levels of MicroProfile, " +
            "Java EE, or Jakarta EE. Refer to the following set of suggested features for guidance: %s";
    private static final String BINARY_SCANNER_CONFLICT_MESSAGE2 = "A working set of features could not be generated due to conflicts " +
            "between configured features: %s. Review and update your server configuration to ensure it is not using conflicting " +
            "features from different levels of MicroProfile, Java EE, or Jakarta EE. Refer to the following set of " +
            "suggested features for guidance: %s";
    private static final String BINARY_SCANNER_CONFLICT_MESSAGE3 = "A working set of features could not be generated due to conflicts " +
            "in the applicationâ€™s API usage: %s. Review and update your application to ensure it is not using conflicting APIs " +
            "from different levels of MicroProfile, Java EE, or Jakarta EE.";
    private static final String BINARY_SCANNER_CONFLICT_MESSAGE4 = "[None available]"; // format should match JVM Set.toString()

    private File binaryScanner;
    private URLClassLoader binaryScannerClassLoader = null;

    GenerateFeaturesTask() {
        configure({
            description 'Generate the features used by an application and add to the configuration of a Liberty server'
            group 'Liberty'
        })
    }

    private List<String> classFiles;

    @Option(option = 'classFile', description = 'If set, will generate features for the list of classes passed.')
    void setClassFiles(List<String> classFiles) {
        this.classFiles = classFiles;
    }

    @TaskAction
    void generateFeatures() {
        binaryScanner = getBinaryScannerJarFromRepository();

        if (classFiles != null && !classFiles.isEmpty()) {
            logger.debug("Generate features for the following class files: " + classFiles);
        } else {
            logger.debug("Generate features for all class files");
        }

        initializeConfigDirectory();
        def serverDirectory = getServerDir(project);
        def libertyDirPropertyFiles;
        try {
            libertyDirPropertyFiles = getLibertyDirectoryPropertyFiles(getInstallDir(project), getUserDir(project), serverDirectory);
        } catch (IOException x) {
            logger.debug("Exception reading the server property files", e);
            logger.error("Error attempting to generate server feature list. Ensure your user account has read permission to the property files in the server installation directory.");
            return;
        }
        // get existing installed server features
        InstallFeatureUtil util;
        try {
            util = getInstallFeatureUtil(new HashSet<String>(), null);
        } catch (PluginScenarioException e) {
            logger.debug("Exception creating the server utility object", e);
            logger.error("Error attempting to generate server feature list.");
            return;
        }

        final boolean optimize = (classFiles == null || classFiles.isEmpty()) ? true : false;
        Set<String> generatedFiles = new HashSet<String>();
        generatedFiles.add(GENERATED_FEATURES_FILE_NAME);    

        util.setLowerCaseFeatures(false);
        // if optimizing, ignore generated files when passing in existing features to binary scanner
        Set<String> existingFeatures = util.getServerFeatures(serverDirectory, libertyDirPropertyFiles, optimize ? generatedFiles : null);
        if (existingFeatures == null) {
            existingFeatures = new HashSet<String>();
        }
        logger.debug("Existing features:" + existingFeatures);
        util.setLowerCaseFeatures(true);

        Set<String> scannedFeatureList;
        try {
            Set<String> directories = getClassesDirectories();
            String[] binaryInputs = getBinaryInputs(classFiles, directories);
            scannedFeatureList = runBinaryScanner(existingFeatures, binaryInputs);
        } catch (InvocationTargetException x) {
            // TODO Figure out what to do when there is a problem not caught in runBinaryScanner()
            logger.error("Exception:"+x.getClass().getName());
            Object o = x.getCause();
            if (o != null) {
                logger.warn("Caused by exception:"+x.getCause().getClass().getName());
                logger.warn("Caused by exception message:"+x.getCause().getMessage());
            }
            logger.error(x.getMessage());
            return;
        } catch (NoRecommendationException noRecommendation) {
            logger.error(String.format(BINARY_SCANNER_CONFLICT_MESSAGE3, noRecommendation.getConflicts()));
            return;
        } catch (RecommendationSetException showRecommendation) {
            if (showRecommendation.isExistingFeaturesConflict()) {
                logger.error(String.format(BINARY_SCANNER_CONFLICT_MESSAGE2, showRecommendation.getConflicts(), showRecommendation.getSuggestions()));
            } else {
                logger.error(String.format(BINARY_SCANNER_CONFLICT_MESSAGE1, showRecommendation.getConflicts(), showRecommendation.getSuggestions()));
            }
            return;
        }

        def missingLibertyFeatures = new HashSet<String>();
        if (scannedFeatureList != null) {
            missingLibertyFeatures.addAll(scannedFeatureList);

            util.setLowerCaseFeatures(false);
            // get set of user defined features so they can be omitted from the generated file that will be written
            Set<String> userDefinedFeatures = optimize ? existingFeatures : util.getServerFeatures(serverDirectory, libertyDirPropertyFiles, generatedFiles);
            logger.debug("User defined features:" + userDefinedFeatures);
            util.setLowerCaseFeatures(true);
            if (userDefinedFeatures != null) {
                missingLibertyFeatures.removeAll(userDefinedFeatures);
            }
        }
        logger.debug("Features detected by binary scanner which are not in server.xml : " + missingLibertyFeatures);

        def newServerXmlSrc = new File(server.configDirectory, GENERATED_FEATURES_FILE_PATH);
        if (missingLibertyFeatures.size() > 0) {
            // Create specialized server.xml
            try {
                ServerConfigXmlDocument configDocument = ServerConfigXmlDocument.newInstance();
                configDocument.createComment(HEADER);
                for (String missing : missingLibertyFeatures) {
                    logger.debug(String.format("Adding missing feature %s to %s.", missing, GENERATED_FEATURES_FILE_PATH));
                    configDocument.createFeature(missing);
                }
                configDocument.writeXMLDocument(newServerXmlSrc);
                logger.debug("Created file "+newServerXmlSrc);
                // Add a reference to this new file in existing server.xml.
                def serverXml = findConfigFile("server.xml", server.serverXmlFile);
                def doc = getServerXmlDocFromConfig(serverXml);
                logger.debug("Xml document we'll try to update after generate features doc="+doc+" file="+serverXml);
                addGenerationCommentToConfig(doc, serverXml);

                logger.info("Generated the following additional features: " + missingLibertyFeatures);
            } catch(ParserConfigurationException | TransformerException | IOException e) {
                logger.debug("Exception creating the server features file", e);
                logger.error("Error attempting to create the server feature file. Ensure your id has write permission to the server installation directory.");
                return;
            }
        } else {
            logger.debug("No additional features were generated.");
        }
    }

    /**
     * Gets the binary scanner jar file from the local cache.
     * Downloads it first from connected repositories such as Maven Central if a newer release is available than the cached version.
     * Note: Maven updates artifacts daily by default based on the last updated timestamp. Users should use 'mvn -U' to force updates if needed.
     * 
     * @return The File object of the binary scanner jar in the local cache.
     * @throws PluginExecutionException
     */
    private File getBinaryScannerJarFromRepository() throws PluginExecutionException {
        try {
            return ArtifactDownloadUtil.downloadArtifact(project, BINARY_SCANNER_MAVEN_GROUP_ID, BINARY_SCANNER_MAVEN_ARTIFACT_ID, BINARY_SCANNER_MAVEN_TYPE, BINARY_SCANNER_MAVEN_VERSION);
        } catch (Exception e) {
            throw new PluginExecutionException("Could not retrieve the binary scanner jar. Ensure you have a connection to Maven Central or another repository that contains the jar configured in your build.gradle: " + e.getMessage(), e);
        }
    }

    /**
     * Return specificFile if it exists; otherwise check for a file with the requested name in the
     * configDirectory and return it if it exists. Null is returned if a file does not exist in 
     * either location.
     */
    private File findConfigFile(String fileName, File specificFile) {
        if (specificFile != null && specificFile.exists()) {
            return specificFile;
        }

        if (server.configDirectory == null) {
            return null;
        }
        File f = new File(server.configDirectory, fileName);
        if (f.exists()) {
            return f;
        } else {
            return null;
        }
    }

    // Convert a file into a document object
    private ServerConfigXmlDocument getServerXmlDocFromConfig(File serverXml) {
        if (serverXml == null || !serverXml.exists()) {
            return null;
        }
        try {
            return ServerConfigXmlDocument.newInstance(serverXml);
        } catch (ParserConfigurationException | SAXException | IOException e) {
            logger.debug("Exception creating server.xml object model", e);
        }
        return null;
    }

    /**
     * Add a comment to server.xml to warn them we created another file with features in it.
     */
    private void addGenerationCommentToConfig(ServerConfigXmlDocument doc, File serverXml) {
        if (doc == null) {
            return;
        }
        try {
            if (doc.createFMComment(FEATURES_FILE_MESSAGE)) {
                doc.writeXMLDocument(serverXml);
                XmlDocument.addNewlineBeforeFirstElement(serverXml);
            }
        } catch (IOException | TransformerException e) {
            log.debug("Exception adding comment to server.xml", e);
        }
        return;
    }

    private Set<String> runBinaryScanner(Set<String> currentFeatureSet, String[] binaryInputs)
            throws PluginExecutionException, NoRecommendationException, RecommendationSetException, InvocationTargetException {
        Set<String> featureList = null;
        if (binaryScanner != null && binaryScanner.exists()) {
            try {
                ClassLoader cl = getScannerClassLoader();
                Class driveScan = cl.loadClass("com.ibm.ws.report.binary.cmdline.DriveScan");
                // args: String[], String, String, List, java.util.Locale
                java.lang.reflect.Method driveScanMavenFeatureList = driveScan.getMethod("driveScanMavenFeatureList", String[].class, String.class, String.class, List.class, java.util.Locale.class);
                if (driveScanMavenFeatureList == null) {
                    logger.debug("Error finding binary scanner method using reflection");
                    return null;
                }
 
                String eeVersion = getEEVersion(project); 
                String mpVersion = getMPVersion(project);
                List<String> currentFeatures;
                if (currentFeatureSet == null) {
                    currentFeatures = new ArrayList<String>();
                } else {
                    currentFeatures = new ArrayList<String>(currentFeatureSet);
                }
                logger.debug("The following messages are from the application binary scanner used to generate Liberty features");
                featureList = (Set<String>) driveScanMavenFeatureList.invoke(null, binaryInputs, eeVersion, mpVersion, currentFeatures, java.util.Locale.getDefault());
                logger.debug("End of messages from application binary scanner. Features recommended :");
                for (String s : featureList) {logger.debug(s);};
            } catch (InvocationTargetException  ite) {
                // This is the exception from the JVM that indicates there was an exception in the method we
                // called through reflection. We must extract the actual exception from the 'cause' field.
                // A RuntimeException means the currentFeatureSet contains conflicts.
                // A FeatureConflictException means the binary files scanned conflict with each other or with
                // the currentFeatureSet parameter.
                Throwable scannerException = ite.getCause();
                if (scannerException instanceof RuntimeException) {
                    // The list of features from the app is passed in but it contains conflicts
                    String problemMessage = scannerException.getMessage();
                    if (problemMessage == null || problemMessage.isEmpty()) {
                        logger.debug("RuntimeException from binary scanner without descriptive message", scannerException);
                        logger.error("Error scanning the application for Liberty features.");
                    } else {
                        Set<String> conflicts = parseScannerMessage(problemMessage);
                        Set<String> sampleFeatureList = null;
                        try {
                            sampleFeatureList = runBinaryScanner(null, getBinaryInputs(null, getClassesDirectories()));
                        } catch (InvocationTargetException retryException) {
                            // binary scanner should not return a RuntimeException since there is no list of app features passed in
                            sampleFeatureList = getNoSampleFeatureList();
                        }
                        throw new RecommendationSetException(true, conflicts, sampleFeatureList);
                    }
                } else if (scannerException.getClass().getName().endsWith("FeatureConflictException")) {
                    // The scanned files conflict with each other or with current features
                    Set<String> conflicts = getConflicts(scannerException);
                    Set<String> sampleFeatureList = null;
                    if (currentFeatureSet != null) {
                        try {
                            sampleFeatureList = runBinaryScanner(null, getBinaryInputs(null, getClassesDirectories()));
                        } catch (InvocationTargetException retryException) {
                            Throwable scannerSecondException = retryException.getCause();
                            if (scannerSecondException.getClass().getName().endsWith("FeatureConflictException")) {
                                // Even after removing the server.xml feature list there are still conflicts in the binaries
                                throw new NoRecommendationException(conflicts);
                            } else {
                                logger.debug("Unexpected failure on retry call to binary scanner", scannerSecondException);
                                logger.debug("Passed directories to binary scanner:"+getClassesDirectories());
                                sampleFeatureList = getNoSampleFeatureList();
                            }
                        }
                        throw new RecommendationSetException(false, conflicts, sampleFeatureList);
                    } else {
                        throw ite;
                    }
                }
            } catch (MalformedURLException|ClassNotFoundException|NoSuchMethodException|IllegalAccessException x){
                // TODO Figure out what to do when there is a problem scanning the features
                logger.error("Exception:"+x.getClass().getName());
                Object o = x.getCause();
                if (o != null) {
                    logger.warn("Caused by exception:"+x.getCause().getClass().getName());
                    logger.warn("Caused by exception message:"+x.getCause().getMessage());
                }
                logger.error(x.getMessage());
            }
        } else {
            if (binaryScanner == null) {
                throw new PluginExecutionException("The binary scanner jar location is not defined.");
            } else {
                throw new PluginExecutionException("Could not find the binary scanner jar at " + binaryScanner.getAbsolutePath());
            }
        }
        return featureList;
    }

    private Set getNoSampleFeatureList() {
        Set sampleFeatureList = new HashSet<String>();
        sampleFeatureList.add(BINARY_SCANNER_CONFLICT_MESSAGE4)
        return sampleFeatureList
    }

    private ClassLoader getScannerClassLoader() throws MalformedURLException {
        if (binaryScannerClassLoader == null) {
            ClassLoader cl = this.getClass().getClassLoader();
            URL[] u = new URL[1];
            u[0] = binaryScanner.toURI().toURL();
            binaryScannerClassLoader = new URLClassLoader(u, cl);
        }
        return binaryScannerClassLoader;
    }

    private String[] getBinaryInputs(List<String> classFiles, Set<String> classDirectories) throws PluginExecutionException {
        Collection<String> resultSet;
        if (classFiles != null && !classFiles.isEmpty()) {
            resultSet = classFiles;
        } else {
            if (classDirectories == null || classDirectories.isEmpty()) {
                throw new PluginExecutionException("Error collecting list of directories to send to binary scanner, list is null or empty.");
            }
            resultSet = classDirectories;
        }

        for (String s : resultSet) {
            logger.debug("Binary scanner input: " + s);
        }

        String[] result = resultSet.toArray(new String[resultSet.size()]);
        return result;
    }

    private Set<String> getClassesDirectories() {
        Set<String> classesDirectories = new ArrayList<String>();
        project.sourceSets.main.getOutput().getClassesDirs().each {
            classesDirectories.add( it.getAbsolutePath() );
        }
        return classesDirectories;
    }

    private getEEVersion(Object project) {
        return null;
    }

    private getMPVersion(Object project) {
        return null;
    }

    @SuppressWarnings("unchecked")
    private Set<String> getConflicts(Throwable scannerResponse) {
        try {
            ClassLoader cl = getScannerClassLoader();
            @SuppressWarnings("rawtypes")
            Class featureConflictException = cl.loadClass("com.ibm.ws.report.exceptions.FeatureConflictException");
            java.lang.reflect.Method conflictFeatureList = featureConflictException.getMethod("getFeatures");
            if (conflictFeatureList == null) {
                logger.debug("Error finding FeatureConflictException method getFeatures using reflection");
                return null;
            }
            return (Set<String>) conflictFeatureList.invoke(scannerResponse);
        } catch (ClassNotFoundException | MalformedURLException | NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException x) {
            //TODO maybe nothing
            logger.error("Exception:"+x.getClass().getName());
            logger.error("Message:"+x.getMessage());
            Object o = x.getCause();
            if (o != null) {
                logger.warn("Caused by exception:"+x.getCause().getClass().getName());
                logger.warn("Caused by exception message:"+x.getCause().getMessage());
            }
        }
        return null;
    }

    private Set<String> parseScannerMessage(String messages) {
        Set<String> features = new HashSet<String>();
        String[] messageArray = messages.split("\n");
        for (String message : messageArray) {
            if (message.startsWith("CWMIG12083")) {
                String [] messageParts = message.split(" ");
                if (messageParts.length > 4) { // should be 20
                    features.add(messageParts[2]);
                    features.add(messageParts[messageParts.length-2]);
                }
            }
        }
        return features;
    }

    // A class to pass the list of conflicts back to the caller.
    private class NoRecommendationException extends Exception {
        private static final long serialVersionUID = 1L;
        Set<String> conflicts;
        NoRecommendationException(Set<String> conflictSet) {
            conflicts = conflictSet;
        }
        public Set<String> getConflicts() {
            return conflicts;
        }
    }

    // A class that encapsulates a list of conflicting features, a suggested list of replacements
    // and a flag that indicates whether the conflicts were found in the features existing in the
    // app's server config or if the conflicts exist in the binary files we examined.
    private class RecommendationSetException extends Exception {
        private static final long serialVersionUID = 1L;
        boolean existingFeaturesConflict;
        Set<String> conflicts;
        Set<String> suggestions;
        RecommendationSetException(boolean existing, Set<String> conflictSet, Set<String> suggestionSet) {
            existingFeaturesConflict = existing;
            conflicts = conflictSet;
            suggestions = suggestionSet;
        }
        public boolean isExistingFeaturesConflict() {
            return existingFeaturesConflict;
        }
        public Set<String> getConflicts() {
            return conflicts;
        }
        public Set<String> getSuggestions() {
            return suggestions;
        }
    }
}
