apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'liberty'

group = 'liberty.gradle'
version = '1'

sourceCompatibility = 1.7
targetCompatibility = 1.7

compileJava.options.encoding = 'UTF-8'

ext {
    // Liberty server properties
    wlpServerName = 'LibertyProjectServer'
  libertyVersion = project.property("libertyVersion")
}

liberty {

    install {
        //runtimeUrl = "http://repo1.maven.org/maven2/com/ibm/websphere/appserver/runtime/wlp-webProfile7/${libertyVersion}/wlp-webProfile7-${libertyVersion}.zip"
        runtimeUrl = "https://artifactory.highmark.com/artifactory/dist/websphere/liberty/${libertyVersion}/wlp-base-all-${libertyVersion}.jar"
    }
    server{
        name = wlpServerName
    }
}

repositories {
    mavenCentral()
    maven {
        name 'liberty-starter-maven-repo'
        url 'http://liberty-starter.wasdev.developer.ibm.com/start/api/v1/repo'
    }
}

task ('runGradleTest') {
  dependsOn 'clean', 'libertyCreate'
  finalizedBy 'validateTasks'
}

task ('validateTasks') {
  doLast {
    def bootstrapFile = new File("${buildDir}/wlp/usr/servers/LibertyProjectServer/bootstrap.properties")
    def jvmOptionsFile = new File("${buildDir}/wlp/usr/servers/LibertyProjectServer/jvm.options")
    def configFile = new File("${buildDir}/wlp/usr/servers/LibertyProjectServer/server.xml")
    def serverEnvFile = new File("${buildDir}/wlp/usr/servers/LibertyProjectServer/server.env")

    assert serverEnvFile.exists() : "file not found"
    assert configFile.exists() : "file not found"
    assert bootstrapFile.exists() : "file not found"
    assert jvmOptionsFile.exists() : "file not found"
  }
}
