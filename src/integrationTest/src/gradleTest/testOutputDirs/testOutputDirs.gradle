group = 'liberty.gradle'
version = '1'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = 'Sonatype Nexus Snapshots'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath group: 'net.wasdev.wlp.gradle.plugins', name: 'liberty-gradle-plugin', version: lgpVersion
    }
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'liberty'

sourceCompatibility = 1.7
targetCompatibility = 1.7

compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

dependencies {
    testCompile localGroovy()
    testCompile 'junit:junit:4.12'
    testCompile 'org.apache.cxf:cxf-rt-rs-client:3.1.1'
    testCompile 'org.glassfish:javax.json:1.0.4'
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.1.0'
}

sourceSets {
    main {
        java {
            srcDir "${project.projectDir}/../../../resources/test/sample.servlet/src/main/java"
        }
    }
}

project.webAppDirName = "../../../resources/test/sample.servlet/src/main/webapp"

ext {
    // Liberty server properties
    wlpServerName = 'LibertyProjectServer'
    serverDirectory = "${project.buildDir}/wlp/usr/servers/${wlpServerName}"
    testServerHttpPort = 9091
    testServerHttpsPort = 9453

    warContext = 'sample.servlet-1'
    appName = 'LibertyProject'
    packageFile = "${project.buildDir}/${appName}.zip"
    packagingType = 'usr'
}

task testWar(type:War){
    baseName = 'testWar'
}

task createServerEnv{
    def serverEnvFile = file("${project.projectDir}/../../../resources/test/sample.servlet/src/main/liberty/config/testOutputDir-server.env")
    if (!serverEnvFile.exists()) {
        serverEnvFile.write("WLP_OUTPUT_DIR=${project.buildDir}/testOutputDir")
    }
}

task copyWlpDir(type:Copy) {
    from "${project.projectDir}/../../../wlp"
    into "$buildDir"
}

installLiberty.dependsOn 'copyWlpDir'

liberty {

    installDir = "$buildDir/wlp"
    
    server{
        name = wlpServerName

        packageLiberty {
            archive = packageFile
            include = packagingType
        }

        bootstrapProperties = ['testHttpPort':testServerHttpPort, 'testHttpsPort':testServerHttpsPort]

        configFile = file("${project.projectDir}/../../../resources/test/sample.servlet/src/main/liberty/config/server.xml")

        serverEnv = file("${project.projectDir}/../../../resources/test/sample.servlet/src/main/liberty/config/testOutputDir-server.env")
        looseApplication = false
        apps = [file("${project.buildDir}/libs/testWar-1.war")]

        verifyAppStartTimeout = 30
    }
}

test {
    dependsOn 'libertyStart'
    finalizedBy 'libertyStop'
}

task runGradleTest {
    dependsOn 'test'
}

libertyCreate.dependsOn 'createServerEnv'
