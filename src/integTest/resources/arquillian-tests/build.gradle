buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath group: 'net.wasdev.wlp.gradle.plugins', name: 'liberty-gradle-plugin', version: lgpVersion
    }
}

apply plugin: 'war'

allprojects {
    apply plugin: 'java'
    apply plugin: 'liberty'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }

    ext {
        // Liberty server properties
        wlpServerName = 'LibertyProjectServer'
        serverDirectory = "${project.buildDir}/wlp/usr/servers/${wlpServerName}"
        testServerHttpPort = 9080
        testServerHttpsPort = 9443

        // This is set in the ibm-web-ext.xml file
        warContext = 'test-configure-arquillian'
    }

    check.dependsOn.remove(test)

    task copyArquillianXml(type: Copy) {
        from '../src/test-profile-resources'
        into '../build/resources/test'
    }

    task deleteArquillianXml (type:Delete) {
        delete '../build/resources/test/arquillian.xml'
    }
}

war {
    archiveName = warContext + '.' + extension
}

liberty {
    server {
        configFile = file("src/main/liberty/config/server.xml")
        bootstrapProperties = ['build.directory': buildDir, 'default.http.port': "${testServerHttpPort}" , 'default.https.port': "${testServerHttpsPort}", 'appContext': "${warContext}", 'appLocation': "${war.archiveName}"]
        name = wlpServerName
        apps = [war]
        looseApplication = true
        verifyAppStartTimeout = 30
    }
}

configurations {
    h2
    h2.transitive = true
    compile.extendsFrom(h2)

    arqManaged.extendsFrom runtime
    arqRemote.extendsFrom runtime
}

dependencies {
    h2 "com.h2database:h2:1.4.195"

    providedCompile "javax.json:javax.json-api:1.0"
    providedCompile "javax.ejb:javax.ejb-api:3.2"
    providedCompile ('javax.ws.rs:javax.ws.rs-api:2.0.1')
    providedCompile ('com.ibm.websphere.appserver.api:com.ibm.websphere.appserver.api.jaxrs20:1.0.18')
    providedCompile ('com.ibm.websphere.appserver.api:com.ibm.websphere.appserver.api.persistence:1.0.18')
    providedCompile ('org.eclipse.persistence:javax.persistence:2.1.0')

    arqManaged "io.openliberty.arquillian:arquillian-liberty-managed:1.0.1"
    arqRemote "io.openliberty.arquillian:arquillian-liberty-remote:1.0.1"

    testCompile "junit:junit:4.12"
    testCompile "net.wasdev.wlp.common:ci.common:1.2"
    testCompile "org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-impl-maven:2.2.4"
    testCompile "org.jboss.arquillian.junit:arquillian-junit-container:1.1.13.Final"
    testCompile "org.jboss.shrinkwrap:shrinkwrap-api:1.2.6"
    testCompile files("${System.properties['java.home']}/../lib/tools.jar")

    libertyRuntime group: runtimeGroup, name: runtimeArtifactId, version: runtimeVersion
}

task copyH2 {
    doLast {
        copy {
            from configurations.h2
            into "$buildDir/wlp/usr/shared/resources/h2"
            include "*.jar"
        }
    }
}

libertyCreate.finalizedBy 'copyH2'

check.dependsOn 'verifyMainAppManaged'

tasks.withType(Test) {
    group 'Verification'
    testLogging.showStandardStreams = true
    dependsOn 'installApps', 'testClasses'
}

task verifyMainAppManaged (type:Test) {
    description 'Tests that the main app is ready before the test app when verifyApps is set properly'
    reports.html.destination = file("$buildDir/reports/verify-main-app-managed")
    reports.junitXml.destination = file("$buildDir/test-results/verify-main-app-managed")
    include '**/RestEndpointIT*'
    classpath += configurations.arqManaged
    dependsOn ':verifyMainAppManaged:configArq'
    finalizedBy 'verifyMainAppManagedValidation'
}

task verifyMainAppManagedValidation (type:Test) {
    reports.html.destination = file("$buildDir/reports/verify-main-app-managed-rest-endpoint-it")
    reports.junitXml.destination = file("$buildDir/test-results/verify-main-app-managed-rest-endpoint-it")
    include '**/VerifyMainAppIT.java'
    classpath += configurations.arqManaged
    dependsOn ':verifyMainAppManaged:configArq'
    finalizedBy 'skipWithXmlManaged'
}

task skipWithXmlManaged (type:Test) {
    description 'For the managed container, tests the task is skipped when the skipIfArquillianXmlExists flag is set to true and arquillian.xml exists in src/test/resources.'
    reports.html.destination = file("$buildDir/reports/skip-with-xml-managed")
    reports.junitXml.destination = file("$buildDir/test-results/skip-with-xml-managed")
    include '**/SkipWithXmlIT*'
    classpath += configurations.arqManaged
    dependsOn ':skipWithXmlManaged:configArq'
    finalizedBy 'skipWithXmlManagedRestEndpointIT'
}

task skipWithXmlManagedRestEndpointIT (type:Test) {
    reports.html.destination = file("$buildDir/reports/skip-with-xml-managed-rest-endpoint-it")
    reports.junitXml.destination = file("$buildDir/test-results/skip-with-xml-managed-rest-endpoint-it")
    include '**/RestEndpointIT*'
    classpath += configurations.arqManaged
    dependsOn ':skipWithXmlManaged:configArq'
    finalizedBy 'skipWithoutXmlManaged'
}

task skipWithoutXmlManaged (type:Test) {
    description 'For the managed container, tests the task is run when the skipIfArquillianXmlExists flag is set to true and arquillian.xml does not exist in src/test/resources'
    reports.html.destination = file("$buildDir/reports/skip-without-xml-managed")
    reports.junitXml.destination = file("$buildDir/test-results/skip-without-xml-managed")
    include '**/SkipWithoutXmlIT*'
    classpath += configurations.arqManaged
    dependsOn ':skipWithoutXmlManaged:configArq'
    finalizedBy 'skipWithoutXmlManagedRestEndpointIT'
}

task skipWithoutXmlManagedRestEndpointIT (type:Test) {
    reports.html.destination = file("$buildDir/reports/skip-without-xml-managed-rest-endpoint-it")
    reports.junitXml.destination = file("$buildDir/test-results/skip-without-xml-managed-rest-endpoint-it")
    include '**/RestEndpointIT*'
    classpath += configurations.arqManaged
    dependsOn ':skipWithoutXmlManaged:configArq'
    finalizedBy 'skipWithXmlRemote'
}

task skipWithXmlRemote (type:Test) {
    description 'For the remote container, tests the task is run when the skipIfArquillianXmlExists flag is set to true and arquillian.xml does not exist in src/test/resources'
    reports.html.destination = file("$buildDir/reports/skip-with-xml-remote")
    reports.junitXml.destination = file("$buildDir/test-results/skip-with-xml-remote")
    include '**/SkipWithXmlIT*'
    classpath += configurations.arqRemote
    dependsOn ':skipWithXmlRemote:configArq'
    finalizedBy 'skipWithoutXmlRemote'
}

task skipWithoutXmlRemote (type:Test) {
    description 'For the remote container, tests the task is run when the skipIfArquillianXmlExists flag is set to true and arquillian.xml does not exist in src/test/resources'
    reports.html.destination = file("$buildDir/reports/skip-without-xml-remote")
    reports.junitXml.destination = file("$buildDir/test-results/skip-without-xml-remote")
    include '**/SkipWithoutXmlIT*'
    classpath += configurations.arqRemote
    dependsOn ':skipWithoutXmlRemote:configArq'
    finalizedBy 'verifyMainAppManagedMultiServer1'
}

task verifyMainAppManagedMultiServer1 (type:Test) {
    description 'Tests that the main app is ready before the test app when verifyApps is set properly'
    reports.html.destination = file("$buildDir/reports/verify-main-app-managed-MS-1")
    reports.junitXml.destination = file("$buildDir/test-results/verify-main-app-managed-MS-1")
    include '**/RestEndpointIT*'
    classpath += configurations.arqManaged
    dependsOn ':verifyMainAppManagedMultiServer:configureArquillian-libertyProjectServer1'
    finalizedBy 'verifyMainAppManagedValidationMultiServer1'
}

task verifyMainAppManagedValidationMultiServer1 (type:Test) {
    reports.html.destination = file("$buildDir/reports/verify-main-app-managed-rest-endpoint-it-MS-1")
    reports.junitXml.destination = file("$buildDir/test-results/verify-main-app-managed-rest-endpoint-it-MS-1")
    include '**/VerifyMainAppITMultiServer1*'
    classpath += configurations.arqManaged
    dependsOn ':verifyMainAppManagedMultiServer:configureArquillian-libertyProjectServer1'
    finalizedBy 'verifyMainAppManagedMultiServer2'
}

task verifyMainAppManagedMultiServer2 (type:Test) {
    description 'Tests that the main app is ready before the test app when verifyApps is set properly'
    reports.html.destination = file("$buildDir/reports/verify-main-app-managed-MS-2")
    reports.junitXml.destination = file("$buildDir/test-results/verify-main-app-managed-MS-2")
    include '**/RestEndpointIT*'
    classpath += configurations.arqManaged
    dependsOn ':verifyMainAppManagedMultiServer:configureArquillian-libertyProjectServer2'
    finalizedBy 'verifyMainAppManagedValidationMultiServer2'
}

task verifyMainAppManagedValidationMultiServer2 (type:Test) {
    reports.html.destination = file("$buildDir/reports/verify-main-app-managed-rest-endpoint-it-MS-2")
    reports.junitXml.destination = file("$buildDir/test-results/verify-main-app-managed-rest-endpoint-it-MS-2")
    include '**/VerifyMainAppITMultiServer2*'
    classpath += configurations.arqManaged
    dependsOn ':verifyMainAppManagedMultiServer:configureArquillian-libertyProjectServer2'
}
