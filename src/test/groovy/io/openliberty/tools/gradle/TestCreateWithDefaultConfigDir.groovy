package io.openliberty.tools.gradle;

import java.io.File
import java.io.FileInputStream;
import java.util.Properties;
import io.openliberty.tools.common.plugins.util.OSUtil

import org.junit.BeforeClass
import org.junit.Test

public class TestCreateWithDefaultConfigDir extends AbstractIntegrationTest{
    static File sourceDir = new File("build/resources/test/server-config")
    static File testBuildDir = new File(integTestDir, "/test-create-with-default-config-dir")
    static String buildFilename = "testCreateLibertyDefaultConfigDir.gradle"

    @BeforeClass
    public static void setup() {
        createDir(testBuildDir)
        createTestProject(testBuildDir, sourceDir, buildFilename, true)
    }

    @Test
    public void test_create_with_default_configDir() {

        runTasks(testBuildDir, 'libertyCreate')

        def bootstrapFile = new File("build/testBuilds/test-create-with-default-config-dir/build/wlp/usr/servers/defaultServer/bootstrap.properties")
        def jvmOptionsFile = new File("build/testBuilds/test-create-with-default-config-dir/build/wlp/usr/servers/defaultServer/jvm.options")
        def configFile = new File("build/testBuilds/test-create-with-default-config-dir/build/wlp/usr/servers/defaultServer/server.xml")
        def serverEnvFile = new File("build/testBuilds/test-create-with-default-config-dir/build/wlp/usr/servers/defaultServer/server.env")

        assert serverEnvFile.exists() : "file not found"
        assert configFile.exists() : "file not found"
        assert bootstrapFile.exists() : "file not found"
        assert jvmOptionsFile.exists() : "file not found"

        assert serverEnvFile.text.equals(new File("build/testBuilds/test-create-with-default-config-dir/src/main/liberty/config/server.env").text) : "server.env file did not copy properly"
        assert configFile.text.equals(new File("build/testBuilds/test-create-with-default-config-dir/src/main/liberty/config/server.xml").text) : "server.xml file did not copy properly"

        if (OSUtil.isWindows()) {
            assert jvmOptionsFile.text.startsWith("# Generated by liberty-gradle-plugin\r\n") : "jvm inline options did not copy properly "+jvmOptionsFile.text
            assert jvmOptionsFile.text.endsWith("-Xmx512m\r\n") : "jvm inline options did not copy properly "+jvmOptionsFile.text
        } else {
            assert jvmOptionsFile.text.startsWith("# Generated by liberty-gradle-plugin\n") : "jvm inline options did not copy properly "+jvmOptionsFile.text
            assert jvmOptionsFile.text.endsWith("-Xmx512m\n") : "jvm inline options did not copy properly "+jvmOptionsFile.text
        }

        // Verify the bootstrap.properties file contains correct info from inline config
        FileInputStream input1 = new FileInputStream(bootstrapFile);

        Properties prop = new Properties();
        prop.load( input1 );
        String value1 = prop.getProperty("default.http.port");
        assert value1 != null : "bootstrap property not found"
        assert value1.equals("9083") : "bootstrap property has incorrect value"

    }
}
