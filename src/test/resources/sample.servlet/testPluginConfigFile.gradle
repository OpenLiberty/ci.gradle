/*
	Testing that liberty-plugin-config.xml is getting generated correctly.
*/
group = 'liberty.gradle'
version = '1'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url = 'https://central.sonatype.com/repository/maven-snapshots/'
        }
    }
    dependencies {
        classpath "io.openliberty.tools:liberty-gradle-plugin:$lgpVersion"
    }
}

apply plugin: 'war'
apply plugin: 'liberty'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileJava.options.encoding = 'UTF-8'

ext {
    // Liberty server properties
    wlpServerName = 'LibertyProjectServer'
    serverDirectory = "${project.getLayout().getBuildDirectory().getAsFile().get()}/wlp/usr/servers/${wlpServerName}"
    testServerHttpPort = 9080
    testServerHttpsPort = 9443

    // This is set in the ibm-web-ext.xml file
    warContext = 'myLibertyApp'

}

liberty {
    server{
        serverXmlFile = file("src/main/liberty/config/server-apps-test.xml")
        name = wlpServerName
        deploy {
            apps = [war]
        }
        stripVersion = true
        looseApplication = true
        noPassword = true
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.13.1'
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.1.0'
    implementation 'org.apache.commons:commons-text:1.13.1'
    constraints {
        // Override the transitive dependency to address CVE-2025-48924
        implementation('org.apache.commons:commons-lang3:3.18.0') {
            because 'CVE in lower versions'
        }
    }
    libertyRuntime group: runtimeGroup, name: kernelArtifactId, version: runtimeVersion
}

test {
    println 'inside the test block'
    reports.html.outputLocation = file("${project.getLayout().getBuildDirectory().getAsFile().get()}/reports/unit")
    reports.junitXml.outputLocation = file("${project.getLayout().getBuildDirectory().getAsFile().get()}/test-results/unit")
    exclude '**/it/**'
}

task integrationTest(type: Test) {
    group = 'Verification'
    description = 'Runs the integration tests.'
    reports.html.outputLocation = file("${project.getLayout().getBuildDirectory().getAsFile().get()}/reports/it")
    reports.junitXml.outputLocation = file("${project.getLayout().getBuildDirectory().getAsFile().get()}/test-results/it")
    include '**/it/**'
    exclude '**/unit/**'

    systemProperties = ['liberty.test.port': testServerHttpPort, 'war.name': warContext]
}

task printMessageAboutRunningServer {
    doLast {
        println "The server is now running at http://localhost:${testServerHttpPort}/${warContext}"
        println "To stop the server run 'gradle libertyStop'"
    }
}

deploy.dependsOn 'war'
libertyStart.finalizedBy 'printMessageAboutRunningServer'
