buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath "io.openliberty.tools:liberty-gradle-plugin:$lgpVersion"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE"
    }
}

apply plugin: 'war'
apply plugin: "io.spring.dependency-management"

allprojects {
    apply plugin: 'java'
    apply plugin: 'liberty'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }

    check.dependsOn.remove(test)

    task copyArquillianXml(type: Copy) {
        from '../src/test-profile-resources'
        into '../build/resources/test'
    }

    task deleteArquillianXml (type:Delete) {
        delete '../build/resources/test/arquillian.xml'
    }
}

war {
    archiveName = 'arquillianTestWar.' + extension
}

liberty {
    server {
        serverXmlFile = file("${rootProject.projectDir}/src/test/resources/server.xml")
        name = 'LibertyProjectServer'
    }
}

configurations {
    arqManaged.extendsFrom runtime
    arqRemote.extendsFrom runtime
}

dependencyManagement {
    imports {
        mavenBom "org.jboss.arquillian:arquillian-bom:1.4.0.Final"
    }
}

dependencies {
    compile ('javax.enterprise:cdi-api:1.2')
   
    testCompile "io.openliberty.tools:ci.common:1.7"
    testCompile group: "io.openliberty.arquillian", name: "arquillian-liberty-managed-junit", version: "1.1.6"
    testCompile ('org.jboss.shrinkwrap:shrinkwrap-api')
    testCompile files("${System.properties['java.home']}/../lib/tools.jar")

    arqManaged "io.openliberty.arquillian:arquillian-liberty-managed:1.0.6"
    arqRemote "io.openliberty.arquillian:arquillian-liberty-remote:1.0.6"
    
    libertyRuntime group: runtimeGroup, name: runtimeArtifactId, version: runtimeVersion

    if(JavaVersion.current().isJava11()) {
        compile "javax.annotation:javax.annotation-api:1.3.2"
    }
}

check.dependsOn 'verifyMainAppManaged'

test.enabled = false

tasks.withType(Test) {
    group 'Verification'
    testLogging.showStandardStreams = true
    dependsOn 'deploy', 'testClasses'
}

task verifyMainAppManaged (type:Test) {
    description 'Tests that the main app is ready before the test app when verifyApps is set properly'
    reports.html.destination = file("$buildDir/reports/verify-main-app-managed")
    reports.junitXml.destination = file("$buildDir/test-results/verify-main-app-managed")
    include '**/GreeterIT*'
    classpath += configurations.arqManaged
    dependsOn ':verifyMainAppManaged:configArq'
    finalizedBy 'verifyMainAppManagedValidation'
}

task verifyMainAppManagedValidation (type:Test) {
    reports.html.destination = file("$buildDir/reports/verify-main-app-managed-rest-endpoint-it")
    reports.junitXml.destination = file("$buildDir/test-results/verify-main-app-managed-rest-endpoint-it")
    include '**/VerifyMainAppIT.java'
    classpath += configurations.arqManaged
    dependsOn ':verifyMainAppManaged:configArq'
    finalizedBy 'skipWithXmlManaged'
}

task skipWithXmlManaged (type:Test) {
    description 'For the managed container, tests the task is skipped when the skipIfArquillianXmlExists flag is set to true and arquillian.xml exists in src/test/resources.'
    reports.html.destination = file("$buildDir/reports/skip-with-xml-managed")
    reports.junitXml.destination = file("$buildDir/test-results/skip-with-xml-managed")
    include '**/SkipWithXmlIT*'
    classpath += configurations.arqManaged
    dependsOn ':skipWithXmlManaged:configArq'
    finalizedBy 'skipWithXmlManagedRestEndpointIT'
}

task skipWithXmlManagedRestEndpointIT (type:Test) {
    reports.html.destination = file("$buildDir/reports/skip-with-xml-managed-rest-endpoint-it")
    reports.junitXml.destination = file("$buildDir/test-results/skip-with-xml-managed-rest-endpoint-it")
    include '**/GreeterIT*'
    classpath += configurations.arqManaged
    dependsOn ':skipWithXmlManaged:configArq'
    finalizedBy 'skipWithoutXmlManaged'
}

task skipWithoutXmlManaged (type:Test) {
    description 'For the managed container, tests the task is run when the skipIfArquillianXmlExists flag is set to true and arquillian.xml does not exist in src/test/resources'
    reports.html.destination = file("$buildDir/reports/skip-without-xml-managed")
    reports.junitXml.destination = file("$buildDir/test-results/skip-without-xml-managed")
    include '**/SkipWithoutXmlIT*'
    classpath += configurations.arqManaged
    dependsOn ':skipWithoutXmlManaged:configArq'
    finalizedBy 'skipWithoutXmlManagedRestEndpointIT'
}

task skipWithoutXmlManagedRestEndpointIT (type:Test) {
    reports.html.destination = file("$buildDir/reports/skip-without-xml-managed-rest-endpoint-it")
    reports.junitXml.destination = file("$buildDir/test-results/skip-without-xml-managed-rest-endpoint-it")
    include '**/GreeterIT*'
    classpath += configurations.arqManaged
    dependsOn ':skipWithoutXmlManaged:configArq'
    finalizedBy 'skipWithXmlRemote'
}

task skipWithXmlRemote (type:Test) {
    description 'For the remote container, tests the task is run when the skipIfArquillianXmlExists flag is set to true and arquillian.xml does not exist in src/test/resources'
    reports.html.destination = file("$buildDir/reports/skip-with-xml-remote")
    reports.junitXml.destination = file("$buildDir/test-results/skip-with-xml-remote")
    include '**/SkipWithXmlIT*'
    classpath += configurations.arqRemote
    dependsOn ':skipWithXmlRemote:configArq'
    finalizedBy 'skipWithoutXmlRemote'
}

task skipWithoutXmlRemote (type:Test) {
    description 'For the remote container, tests the task is run when the skipIfArquillianXmlExists flag is set to true and arquillian.xml does not exist in src/test/resources'
    reports.html.destination = file("$buildDir/reports/skip-without-xml-remote")
    reports.junitXml.destination = file("$buildDir/test-results/skip-without-xml-remote")
    include '**/SkipWithoutXmlIT*'
    classpath += configurations.arqRemote
    dependsOn ':skipWithoutXmlRemote:configArq'
}
