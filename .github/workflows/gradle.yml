# This workflow will build a Java project with Gradle
# For more information see: https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: '**'
  pull_request:
    branches: [ main ]

jobs:
  cache:
    name: Cache Maven and Gradle packages
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, windows-latest]
    steps:
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          ${{ runner.os }}-
  build-windows:
    runs-on: windows-latest
    name: ${{ matrix.RUNTIME }} ${{ matrix.RUNTIME_VERSION }}, Java ${{ matrix.java }}, Windows
    needs: cache
    strategy:
      fail-fast: false
      matrix:
        # test against latest update of each major Java version, as well as specific updates of LTS versions:
        RUNTIME: [ol, wlp]
        RUNTIME_VERSION: [21.0.0.3, 20.0.0.12]
        java: [11, 8]
        exclude:
        - java: 8
          RUNTIME_VERSION: 20.0.0.12
        - java: 8
          RUNTIME: wlp
    steps:
    - name: Setup Java ${{ matrix.java }}
      uses: joschi/setup-jdk@v2
      with:
        java-version: ${{ matrix.java }}
    - name: Checkout ci.gradle
      uses: actions/checkout@v2
    - name: Clone ci.ant, ci.common, ci.gradle repos to C drive
      run: |
        cp -r D:/a/ci.gradle/ci.gradle C:/ci.gradle
        git clone https://github.com/OpenLiberty/ci.common/ C:/ci.common
        git clone https://github.com/OpenLiberty/ci.ant C:/ci.ant
    - name: Install ci.ant and ci.common
      run: |
        cd C:/ci.ant
        mvn clean install
        cd C:/ci.common
        mvn clean install
    - name: Run tests with Gradle on Windows
      working-directory: C:/ci.gradle
      # LibertyTest is excluded because test0_run hangs
      run: ./gradlew clean install check -P"test.exclude"="**/*15*,**/Polling*,**/TestLoose*,**/LibertyTest*" -Druntime=${{ matrix.RUNTIME }} -DruntimeVersion="${{ matrix.RUNTIME_VERSION }}" ${GRADLE_OPTS} --stacktrace --info --no-daemon
      timeout-minutes: 60
      env:
        GRADLE_OPTS: "-Dorg.gradle.jvmargs='-XX:MaxMetaspaceSize=512m'"
    - name: Copy build/report/tests/test for upload
      if: ${{ always() }}
      working-directory: C:/ci.gradle
      run: cp -r build/reports/tests/test D:/buildReports/${{runner.os}}/java${{matrix.java}}/${{matrix.RUNTIME}}-${{matrix.RUNTIME_VERSION}}/      
    - uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: buildReportsArtifact
        path: D:/buildReports
        retention-days: 3
  build-unix:
    runs-on: ubuntu-18.04
    name: ${{ matrix.RUNTIME }} ${{ matrix.RUNTIME_VERSION }}, Java ${{ matrix.java }}, Linux
    needs: cache
    # Steps represent a sequence of tasks that will be executed as part of the job
    strategy:
      fail-fast: false
      matrix:
        # test against latest update of each major Java version, as well as specific updates of LTS versions:
        RUNTIME: [ol, wlp]
        RUNTIME_VERSION: [21.0.0.3, 20.0.0.12]
        java: [11, 8]
        exclude:
        - java: 8
          RUNTIME_VERSION: 20.0.0.12
    steps:
    - name: Setup Java ${{ matrix.java }}
      uses: joschi/setup-jdk@v2
      with:
        java-version: ${{ matrix.java }}
    - name: Checkout ci.gradle
      uses: actions/checkout@v2
    - name: Checkout ci.common
      uses: actions/checkout@v2
      with:
        repository: OpenLiberty/ci.common
        path: ci.common
    - name: Checkout ci.ant
      uses: actions/checkout@v2
      with:
        repository: OpenLiberty/ci.ant
        path: ci.ant
    - name: Install ci.ant and ci.common
      run: |
        cd ./ci.ant
        mvn clean install
        cd ../ci.common
        mvn clean install
        cd ..
    - name: Run tests with Gradle on Ubuntu
      run: |
        export GRADLE_OPTS="-Dorg.gradle.daemon=true -Dorg.gradle.jvmargs='-XX:MaxPermSize=1024m -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:+HeapDumpOnOutOfMemoryError -Xmx2048m'"
        ./gradlew clean install check -P"test.exclude"="**/*15*" -Druntime=${{ matrix.RUNTIME }} -DruntimeVersion="${{ matrix.RUNTIME_VERSION }}" --stacktrace --info --no-daemon
    - name: Run SpringBoot tests with Gradle 4.10 wrapper on Ubuntu
      run: |
        ./gradlew wrapper --gradle-version 4.10
        ./gradlew check -P"test.include"="**/*15*" -Druntime=${{ matrix.RUNTIME }} -DruntimeVersion="${{ matrix.RUNTIME_VERSION }}" --stacktrace --info --no-daemon
    - name: Copy build/report/tests/test for upload
      if: ${{ always() }}
      run: mkdir -p ${BUILD_REPORTS_PATH} && cp -r build/reports/tests/test ${BUILD_REPORTS_PATH}
      env:
        BUILD_REPORTS_PATH: ~/buildReports/${{runner.os}}/java${{matrix.java}}/${{matrix.RUNTIME}}-${{matrix.RUNTIME_VERSION}}/
    - uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: buildReportsArtifact
        path: ~/buildReports
        retention-days: 3